#-------------------------------------------------------------
#               CELL TYPE SPECIFIC GENES
#-------------------------------------------------------------

#--------------------------------------------------------
# ----- Load packages usefull for this analysis -----
#--------------------------------------------------------
library(reshape2)
library(ggplot2)
library(ggpubr)

#--------------------------------------------------------
# ----- Import the data -----
#--------------------------------------------------------
DATA <- read.csv("GSM3389578_tissue_LogNormalized.txt.gz",sep = "\t")


#--------------------------------------------------------
# ----- Separate and cluster each cell type in a specific dataframe -----
#--------------------------------------------------------

# --- Cluster Enterocytes and Enterocytes progenitors late in the vector EC ---
EC <- DATA[,grepl("Enterocyte",names(DATA))]
EC <- EC[,!grepl("Enterocyte.Progenitor.Early",names(EC))] #We want all the "Enterocytes" except those called "Early"
colnames(EC) <- c(paste("EC",seq(1:ncol(EC))))

# --- Cluster Stem Cells in the vector SC ---
SC <- DATA[,grepl("Stem",names(DATA))]
colnames(SC) <- c(paste("SC",seq(1:ncol(SC))))

# --- Cluster Transient Amplifying Cells and Enterocytes progenitors early in the vector TA ---
TA1 <- DATA[,grepl("TA",names(DATA))]
TA2 <- DATA[,grepl("Enterocyte.Progenitor.Early",names(DATA))] #We want to add also the enterocytes called "Early"
TA <- cbind.data.frame(TA1,TA2)
colnames(TA) <- c(paste("TA",seq(1:ncol(TrAm))))

# --- Cluster Goblet Cells in the vector GB ---
GB <- DATA[,grepl("Goblet",names(DATA))]
colnames(GB) <- c(paste("GB",seq(1:ncol(GB))))

# --- Cluster Enteroendocrine Cells in the vector EE ---
EE <- DATA[,grepl("Endocrine",names(DATA))]
colnames(EE) <- c(paste("EE",seq(1:ncol(EE))))

# --- Cluster Tuft Cells in the vector TFT ---
TFT <- DATA[,grepl("Tuft",names(DATA))]
colnames(TFT) <- c(paste("TFT",seq(1:ncol(TFT))))

# --- Cluster Paneth Cells in the vector PNT ---
PNT <- DATA[,grepl("Paneth",names(DATA))]
colnames(PNT) <- c(paste("PNT",seq(1:ncol(PNT))))

#--------------------------------------------------------
# ----- Calculation of the correlation coefficient for each cell type -----
#--------------------------------------------------------

# --- Calculate the correlation ---
ECCor <- cor(EC)
EECor <- cor(EE)
PNTCor <- cor(PNT)
TACor <- cor(TA)
SCCor <- cor(SC)
GBCor <- cor(GB)
TFTCor <- cor(TFT)

#--------------------------------------------------------
# ----- Create plot for each cell type -----
#--------------------------------------------------------

# --- Enterocytes ---
ECCor <- cor(EC)
meltedECCor <- melt(ECCor)
colnames(meltedECCor)[3] <- "Pearson Correlation"

ECcorplot <- ggplot(data = meltedECCor, aes(x=Var1, y=Var2, fill=`Pearson Correlation`)) + 
  geom_tile()+
  theme(legend.title = element_text("Pearson\nCorrelation"), 
        axis.title = element_blank(),
        axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        axis.text.y = element_blank())+
  ggtitle("Enterocytes")+
  scale_fill_continuous(low="white", high="steelblue3",limits=c(0,1))

ggsave("ECCor.png",ECcorplot, width = 8, height = 5)


# --- Enteroendocrine Cells ---
EECor <- cor(EE)
meltedEECor <- melt(EECor)
colnames(meltedEECor)[3] <- "Pearson Correlation"

EEcorplot <- ggplot(data = meltedEECor, aes(x=Var1, y=Var2, fill=`Pearson Correlation`)) + 
  geom_tile()+
  theme(legend.title = element_text("Pearson\nCorrelation"), 
        axis.title = element_blank(),
        axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        axis.text.y = element_blank())+
  ggtitle("Endocrine Cells")+
  scale_fill_continuous(low="white", high="steelblue3",limits=c(0,1))

ggsave("EECor.png",EEcorplot, width = 8, height = 5)


# --- Paneth Cells ---
PNTCor <- cor(PNT)
meltedPNTCor <- melt(PNTCor)
colnames(meltedPNTCor)[3] <- "Pearson Correlation"

PNTcorplot <- ggplot(data = meltedPNTCor, aes(x=Var1, y=Var2, fill=`Pearson Correlation`)) + 
  geom_tile()+
  theme(legend.title = element_text("Pearson\nCorrelation"), 
        axis.title = element_blank(),
        axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        axis.text.y = element_blank())+
  ggtitle("Paneth Cells")+
  scale_fill_continuous(low="white", high="steelblue3",limits=c(0,1))

ggsave("PNTCor.png",PNTcorplot, width = 8, height = 5)


# --- Transient Amplifying Cells ---
TACor <- cor(TA)
meltedTACor <- melt(TACor)
colnames(meltedTACor)[3] <- "Pearson Correlation"

TAcorplot <- ggplot(data = meltedTACor, aes(x=Var1, y=Var2, fill=`Pearson Correlation`)) + 
  geom_tile()+
  theme(legend.title = element_text("Pearson\nCorrelation"),
        axis.title = element_blank(),
        axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        axis.text.y = element_blank())+
  ggtitle("Transient Amplifying Cells")+
  scale_fill_continuous(low="white", high="steelblue3",limits=c(0,1))

ggsave("TACor.png",TAcorplot, width = 8, height = 5)


# --- Stem Cells ---
SCCor <- cor(SC)
meltedSCCor <- melt(SCCor)
colnames(meltedSCCor)[3] <- "Pearson Correlation"

SCcorplot <- ggplot(data = meltedSCCor, aes(x=Var1, y=Var2, fill=`Pearson Correlation`)) + 
  geom_tile()+
  theme(legend.title = element_text("Pearson\nCorrelation"), 
        axis.title = element_blank(),
        axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        axis.text.y = element_blank())+
  ggtitle("Transient Amplifying Cells")+
  scale_fill_continuous(low="white", high="steelblue3",limits=c(0,1))

ggsave("SCCor.png",SCcorplot, width = 8, height = 5)


# --- Goblet Cells ---
GBCor <- cor(GB)
meltedGBCor <- melt(GBCor)
colnames(meltedGBCor)[3] <- "Pearson Correlation"

GBcorplot <- ggplot(data = meltedGBCor, aes(x=Var1, y=Var2, fill=`Pearson Correlation`)) + 
  geom_tile()+
  theme(legend.title = element_text("Pearson\nCorrelation"), 
        axis.title = element_blank(),
        axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        axis.text.y = element_blank())+
  ggtitle("Goblet Cells")+
  scale_fill_continuous(low="white", high="steelblue3",limits=c(0,1))

ggsave("GBLCor.png",GBcorplot, width = 8, height = 5)


# --- Tuft Cells ---
TFTCor <- cor(TFT)
meltedTFTCor <- melt(TFTCor)
colnames(meltedTFTCor)[3] <- "Pearson Correlation"

TFcorplot <- ggplot(data = meltedTFTCor, aes(x=Var1, y=Var2, fill=`Pearson Correlation`)) + 
  geom_tile()+
  theme(legend.title = element_text("Pearson\nCorrelation"), 
        axis.title = element_blank(),
        axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        axis.text.y = element_blank())+
  ggtitle("Tuft Cells")+
  scale_fill_continuous(low="white", high="steelblue3",limits=c(0,1))

ggsave("TFCor.png",TFcorplot, width = 8, height = 5)


#--------------------------------------------------------
# ----- Subsetting cells that do not have the same expression profile as others in each cell type -----
#--------------------------------------------------------

# --- Keep only the cells with a mean correlation above 0.60 ---
ECcorMean <- t(as.data.frame(apply(ECCor,2,mean)))
EC_Sbst <- EC[,which(ECcorMean>0.60)]

EEcorMean <- t(as.data.frame(apply(EECor,2,mean)))
EE_Sbst <- EE[,which(EEcorMean>0.60)]

GBcorMean <- t(as.data.frame(apply(GBCor,2,mean)))
GB_Sbst <- GBL[,which(GBcorMean>0.60)]

GBcorMean <- t(as.data.frame(apply(GBCor,2,mean)))
GB_Sbst <- GB[,which(GBcorMean>0.60)]

PNTcorMean <- t(as.data.frame(apply(PNTCor,2,mean)))
PNT_Sbst <- PNT[,which(PNTcorMean>0.60)]

SCcorMean <- t(as.data.frame(apply(SCCor,2,mean)))
SC_Sbst <- SC[,which(SCcorMean>0.60)]

TAcorMean <- t(as.data.frame(apply(TACor,2,mean)))
TA_Sbst <- TA[,which(TAcorMean>0.60)]

TFTcorMean <- t(as.data.frame(apply(TFTCor,2,mean)))
TFT_Sbst <- TFT[,which(TFTcorMean>0.60)]


#--------------------------------------------------------
# ----- Calculating the correlation coefficient and creating graphs after the deletion -----
#--------------------------------------------------------

# --- Enterocytes ---
ECCor <- cor(EC_Sbst) #Calculating the correlation again but without the cells deleted
meltedECCor <- melt(ECCor)
colnames(meltedECCor)[3] <- "Pearson Correlation"

ECcorplot <- ggplot(data = meltedECCor, aes(x=Var1, y=Var2, fill=`Pearson Correlation`)) + 
  geom_tile()+
  theme(legend.title = element_text("Pearson\nCorrelation"), 
        axis.title = element_blank(),
        axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        axis.text.y = element_blank())+
  ggtitle("Enterocytes")+
  scale_fill_continuous(low="white", high="steelblue3",limits=c(0,1))

ggsave("ECCor_After.png",ECcorplot, width = 8, height = 5)


# --- Enteroendocrine cells ---
EECor <- cor(EE_Sbst) #Calculating the correlation again but without the cells deleted
meltedEECor <- melt(EECor)
colnames(meltedEECor)[3] <- "Pearson Correlation"

EEcorplot <- ggplot(data = meltedEECor, aes(x=Var1, y=Var2, fill=`Pearson Correlation`)) + 
  geom_tile()+
  theme(legend.title = element_text("Pearson\nCorrelation"), 
        axis.title = element_blank(),
        axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        axis.text.y = element_blank())+
  ggtitle("Endocrine Cells")+
  scale_fill_continuous(low="white", high="steelblue3",limits=c(0,1))

ggsave("EECor_After.png",EEcorplot, width = 8, height = 5)


# --- Paneth Cells ---
PNTCor <- cor(PNT_Sbst) #Calculating the correlation again but without the cells deleted
meltedPNTCor <- melt(PNTCor)
colnames(meltedPNTCor)[3] <- "Pearson Correlation"

PNTcorplot <- ggplot(data = meltedPNTCor, aes(x=Var1, y=Var2, fill=`Pearson Correlation`)) + 
  geom_tile()+
  theme(legend.title = element_text("Pearson\nCorrelation"), 
        axis.title = element_blank(),
        axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        axis.text.y = element_blank())+
  ggtitle("Paneth Cells")+
  scale_fill_continuous(low="white", high="steelblue3",limits=c(0,1))

ggsave("PNTCor_after.png",PNTcorplot, width = 8, height = 5)


# --- Transient Amplifying Cells ---
TACor <- cor(TA_Sbst) #Calculating the correlation again but without the cells deleted
meltedTACor <- melt(TACor)
colnames(meltedTACor)[3] <- "Pearson Correlation"

TAcorplot <- ggplot(data = meltedTACor, aes(x=Var1, y=Var2, fill=`Pearson Correlation`)) + 
  geom_tile()+
  theme(legend.title = element_text("Pearson\nCorrelation"),
        axis.title = element_blank(),
        axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        axis.text.y = element_blank())+
  ggtitle("Transient Amplifying Cells")+
  scale_fill_continuous(low="white", high="steelblue3",limits=c(0,1))

ggsave("TACor_After.png",TAcorplot, width = 8, height = 5)


# --- Stem Cells ---
SCCor <- cor(SC_Sbst) #Calculating the correlation again but without the cells deleted
meltedSCCor <- melt(SCCor)
colnames(meltedSCCor)[3] <- "Pearson Correlation"

SCcorplot <- ggplot(data = meltedSCCor, aes(x=Var1, y=Var2, fill=`Pearson Correlation`)) + 
  geom_tile()+
  theme(legend.title = element_text("Pearson\nCorrelation"), 
        axis.title = element_blank(),
        axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        axis.text.y = element_blank())+
  ggtitle("Transient Amplifying Cells")+
  scale_fill_continuous(low="white", high="steelblue3",limits=c(0,1))

ggsave("SCCor_After.png",SCcorplot, width = 8, height = 5)


# --- Goblet Cells ---
GBCor <- cor(GB_Sbst) #Calculating the correlation again but without the cells deleted
meltedGBCor <- melt(GBCor)
colnames(meltedGBCor)[3] <- "Pearson Correlation"

GBcorplot <- ggplot(data = meltedGBCor, aes(x=Var1, y=Var2, fill=`Pearson Correlation`)) + 
  geom_tile()+
  theme(legend.title = element_text("Pearson\nCorrelation"), 
        axis.title = element_blank(),
        axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        axis.text.y = element_blank())+
  ggtitle("Goblet Cells")+
  scale_fill_continuous(low="white", high="steelblue3",limits=c(0,1))

ggsave("GBLCor_After.png",GBcorplot, width = 8, height = 5)


# --- Tuft Cells ---
TFTCor <- cor(TFT_Sbst) #Calculating the correlation again but without the cells deleted
meltedTFTCor <- melt(TFTCor)
colnames(meltedTFTCor)[3] <- "Pearson Correlation"

TFcorplot <- ggplot(data = meltedTFTCor, aes(x=Var1, y=Var2, fill=`Pearson Correlation`)) + 
  geom_tile()+
  theme(legend.title = element_text("Pearson\nCorrelation"), 
        axis.title = element_blank(),
        axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        axis.text.y = element_blank())+
  ggtitle("Tuft Cells")+
  scale_fill_continuous(low="white", high="steelblue3",limits=c(0,1))

ggsave("TFCor_After.png",TFcorplot, width = 8, height = 5)


# --- Renaming the columns of each dataset with the name of the cell type ---
colnames(EC_Sbst) <- rep("Enterocytes", ncol(EC_Sbst))
colnames(EE_Sbst) <- rep("Endocrine Cells", ncol(EE_Sbst))
colnames(GB_Sbst) <- rep("Goblet Cells", ncol(GB_Sbst))
colnames(PNT_Sbst) <- rep("Paneth Cells", ncol(PNT_Sbst))
colnames(SC_Sbst) <- rep("Stem Cells", ncol(SC_Sbst))
colnames(TA_Sbst) <- rep("Transient Amplifying Cells", ncol(TA_Sbst))
colnames(TFT_Sbst) <- rep("Tuft Cells", ncol(TFT_Sbst))

# --- Clustering all the cell types in one dataframe
DATASbst <- cbind.data.frame(EC_Sbst, EE_Sbst, PNT_Sbst, TA_Sbst, SC_Sbst, GB_Sbst, TFT_Sbst)

# --- Preparing data for statistics. 
DATASbst <- DATASbst+1 #Adding 1 to be able to log-transform all the data
DATAsbstlog <- log2(DATASbst) #Log-transform the data to perform a log-fold change analysis


#--------------------------------------------------------
# ----- STATISTICS -----
#--------------------------------------------------------

# --- Adding 1 to each cell type dataframe to be able to apply a log transformation ---
EC_mean <- EC_Sbst+1
EE_mean <- EE_Sbst+1
SC_mean <- SC_Sbst+1
TA_mean <- TA_Sbst+1
PNT_mean <- PNT_Sbst+1
GB_mean <- GB_Sbst+1
TFT_mean <- TFT_Sbst+1

# --- Calculate the mean expression of each gene in each cell type ---
EC_mean <- data.frame(apply(EC_mean, 1, mean))
EE_mean <- data.frame(apply(EE_mean, 1, mean))
PNT_mean <- data.frame(apply(PNT_mean,1, mean))
TA_mean <- data.frame(apply(TA_mean, 1, mean))
SC_mean <- data.frame(apply(SC_mean, 1, mean))
GB_mean <- data.frame(apply(GB_mean, 1, mean))
TFT_mean <- data.frame(apply(TFT_mean,1, mean))
All_mean <- cbind.data.frame(EC_mean, EE_mean, PNT_mean, TA_mean, SC_mean, GB_mean, TFT_mean)


# --- Create function to make boxplots with mean and not median ---
min.mean.sd.max <- function(x) {
  v <- ifelse (mean(x)-sd(x)<0, 0, mean(x) - sd(x))
  r <- c(min(x), v, mean(x), mean(x) + sd(x), max(x))
  names(r) <- c("ymin", "lower", "middle", "upper", "ymax")
  r
}

# --- Create function to disable the display of quartile under 0 ---
min.med.qt.max <- function(x) {
  Q1 <- median(x)-median(x)/2
  Q3 <- median(x)+median(x)/2
  v <- ifelse (min(Q1-1.5*(Q3-Q1))<0, 0, min(Q1-1.5*(Q3-Q1)))
  r <- c(v, Q1 , median(x), Q3 , max(Q3+1.5*(Q3-Q1)))
  names(r) <- c("ymin", "lower", "middle", "upper", "ymax")
  r
}


#--------------------------------------------------------
# ----- CELL TYPE SPECIFIC GENES -----
#--------------------------------------------------------

#---------------------------------------
# EC cell type specific Genes
#--------------------------------------

#----- Merging dataframe of mean expression of EC with all the other cell types -----
FC_ECEE <- cbind.data.frame(EC_mean, EE_mean)
FC_ECPNT <- cbind.data.frame(EC_mean, PNT_mean)
FC_ECTA<- cbind.data.frame(EC_mean, TA_mean)
FC_ECSC <- cbind.data.frame(EC_mean, SC_mean)
FC_ECGB <- cbind.data.frame(EC_mean, GB_mean)
FC_ECTFT <- cbind.data.frame(EC_mean, TFT_mean)


#----- Calculate the fold change betweet Enterocytes and all the other cell types -----
FC_ECEE <- transform(FC_ECEE, FoldChange=FC_ECEE[,1]/FC_ECEE[,2])
FC_ECPNT <- transform(FC_ECPNT, FoldChange=FC_ECPNT[,1]/FC_ECPNT[,2])
FC_ECTA <- transform(FC_ECTA, FoldChange=FC_ECTA[,1]/FC_ECTA[,2])
FC_ECSC <- transform(FC_ECSC, FoldChange=FC_ECSC[,1]/FC_ECSC[,2])
FC_ECGB <- transform(FC_ECGB, FoldChange=FC_ECGB[,1]/FC_ECGB[,2])
FC_ECTFT <- transform(FC_ECTFT, FoldChange=FC_ECTFT[,1]/FC_ECTFT[,2])


#----- Log transform the data to have a better distribution of the results -----
FC_ECEE$FoldChange <- log2(FC_ECEE$FoldChange)
FC_ECPNT$FoldChange <- log2(FC_ECPNT$FoldChange)
FC_ECTA$FoldChange <- log2(FC_ECTA$FoldChange)
FC_ECSC$FoldChange <- log2(FC_ECSC$FoldChange)
FC_ECGB$FoldChange <- log2(FC_ECGB$FoldChange)
FC_ECTFT$FoldChange <- log2(FC_ECTFT$FoldChange)


#----- Extract the 300 genes with the highest fold change in each fold change analysis for the enterocytess -----
FC_ECEE <- rownames(head(FC_ECEE[order(FC_ECEE$FoldChange, decreasing = TRUE),],300))
FC_ECPNT <- rownames(head(FC_ECPNT[order(FC_ECPNT$FoldChange, decreasing = TRUE),],300))
FC_ECTA <- rownames(head(FC_ECTA[order(FC_ECTA$FoldChange, decreasing = TRUE),],300))
FC_ECSC <- rownames(head(FC_ECSC[order(FC_ECSC$FoldChange, decreasing = TRUE),],300))
FC_ECGB <- rownames(head(FC_ECGB[order(FC_ECGB$FoldChange, decreasing = TRUE),],300))
FC_ECTFT <- rownames(head(FC_ECTFT[order(FC_ECTFT$FoldChange, decreasing = TRUE),],300))


#----- Extract the genes found in each analysis -----
ECgene <- intersect(FC_ECEE, FC_ECGB)
ECgene <- intersect(ECgene, FC_ECPNT)
ECgene <- intersect(ECgene, FC_ECTA)
ECgene <- intersect(ECgene, FC_ECSC)
ECgene <- intersect(ECgene, FC_ECGB)
ECgene <- intersect(ECgene, FC_ECTFT)


#----- Extract in the original dataframe with expression data the precedent extracted genes -----
CellEC <- DATASbst[paste(ECgene),]

CompECmean <- All_mean[,-1]
CompECmean <- data.frame(apply(CompECmean, 1, mean))
CompECmean <- cbind(EC_mean, CompECmean)
CompECmean <- transform(CompECmean, FC=CompECmean[,1]/CompECmean[,2])
CompECmean <- CompECmean[ECgene,]
CompECmean <- CompECmean[order(CompECmean$FC, decreasing = TRUE),]

CellEC <- CellEC[rownames(head(CompECmean, 10)),]
CellEC <- log2(CellEC)
CellEC <- cbind(rownames(CellEC), CellEC)
colnames(CellEC)<- c("Gene", 
                     paste("Enterocytes", seq(1:ncol(EC_Sbst))),
                     paste("Endocrine Cells", seq(1:ncol(EE_Sbst))),
                     paste("Paneth Cells", seq(1:ncol(PNT_Sbst))),
                     paste("TA", seq(1:ncol(TA_Sbst))),
                     paste("SC", seq(1:ncol(SC_Sbst))),
                     paste("GB", seq(1:ncol(GB_Sbst))),
                     paste("TFT", seq(1:ncol(TFT_Sbst))))
rownames(CellEC) <- NULL

CellEC <- melt(CellEC, id.vars = "Gene")
CellEC$variable<- c(rep("EC", ncol(EC_Sbst)*10),
                    rep("EE", ncol(EE_Sbst)*10),
                    rep("PNT", ncol(PNT_Sbst)*10),
                    rep("TA", ncol(TA_Sbst)*10),
                    rep("SC", ncol(SC_Sbst)*10),
                    rep("GB", ncol(GB_Sbst)*10),
                    rep("TFT",ncol(TFT_Sbst)*10))


#----- Extract the mean value of the expression of each extracted genes in each cell type -----
AB <- data.frame(NULL)
AC <- data.frame(NULL)
AD <- data.frame(NULL)
AE <- data.frame(NULL)
AF <- data.frame(NULL)
AG <- data.frame(NULL)
AH <- data.frame(NULL)

for (i in rownames(head(CompECmean, 10))){
  AA <- CellEC[which(CellEC$Gene==i),]
  AB <- rbind(AB, mean(AA[which(AA$variable=="EC"),3])) #Extract the gene mean expression in Enterocytes
  AC <- rbind(AC, mean(AA[which(AA$variable=="EE"),3])) #Extract the gene mean expression in Enteroendocrine Cells
  AD <- rbind(AD, mean(AA[which(AA$variable=="PNT"),3])) #Extract the gene mean expression in Paneth Cells
  AE <- rbind(AE, mean(AA[which(AA$variable=="TA"),3])) #Extract the gene mean expression in Transient Amplifying Cells
  AF <- rbind(AF, mean(AA[which(AA$variable=="SC"),3])) #Extract the gene mean expression in Stem Cells
  AG <- rbind(AG, mean(AA[which(AA$variable=="GB"),3])) #Extract the gene mean expression in Goblet Cells
  AH <- rbind(AH, mean(AA[which(AA$variable=="TFT"),3])) #Extract the gene mean expression in Tuft Cells
}
ECgenemean <- cbind.data.frame(rownames(head(CompECmean, 10)),AB, AC, AD, AE, AF, AG, AH)
colnames(ECgenemean) <- c("Gene","EC","EE","PNT","TA","SC","GB","TFT")
write.csv(ECgenemean, file = "ECmeans.csv") #Save in a .csv file


#----- Extract the median value of the expression of each extracted genes in each cell type -----
AB <- data.frame(NULL)
AC <- data.frame(NULL)
AD <- data.frame(NULL)
AE <- data.frame(NULL)
AF <- data.frame(NULL)
AG <- data.frame(NULL)
AH <- data.frame(NULL)

for (i in rownames(head(CompECmean, 10))){
  AA <- CellEC[which(CellEC$Gene==i),]
  AB <- rbind(AB, median(AA[which(AA$variable=="EC"),3]))
  AC <- rbind(AC, median(AA[which(AA$variable=="EE"),3]))
  AD <- rbind(AD, median(AA[which(AA$variable=="PNT"),3]))
  AE <- rbind(AE, median(AA[which(AA$variable=="TA"),3]))
  AF <- rbind(AF, median(AA[which(AA$variable=="SC"),3]))
  AG <- rbind(AG, median(AA[which(AA$variable=="GB"),3]))
  AH <- rbind(AH, median(AA[which(AA$variable=="TFT"),3]))
}
ECgenemedian <- cbind.data.frame(rownames(head(CompECmean, 10)),AB, AC, AD, AE, AF, AG, AH)
colnames(ECgenemedian) <- c("Gene","EC","EE","PNT","TA","SC","GB","TFT")
write.csv(ECgenemedian, file = "ECmedian.csv")



#----- Create plots of the cell type specific genes -----
CellEC$variable<- c(rep("Enterocytes", ncol(EC_Sbst)*10),
                    rep("Endocrine Cells", ncol(EE_Sbst)*10),
                    rep("Paneth Cells", ncol(PNT_Sbst)*10),
                    rep("TA Cells", ncol(TA_Sbst)*10),
                    rep("Stem Cells", ncol(SC_Sbst)*10),
                    rep("Goblet Cells", ncol(GB_Sbst)*10),
                    rep("Tuft Cells",ncol(TFT_Sbst)*10))

CellEC$Colour <-  ifelse(CellEC$variable == "Enterocytes", paste("Color2"), paste("Color1"))


png("EC10mean.png", width = 6000, height = 9000, units = "px", res = 500)
EC10mean <- ggplot(CellEC)+
  facet_wrap(.~Gene, ncol = 2)+
  geom_jitter(aes(variable, value),position = position_dodge(0.5), shape=NA )+
  stat_summary(fun.data = min.mean.sd.max, geom = "boxplot", aes(x=variable, y=value, fill=Colour))+
  ggtitle("Mean")+
  ylab("log2(TPM+1)")+
  scale_fill_manual(values=c("white","gold2"))+
  theme(axis.title = element_text(size = 22),
        axis.text = element_text(size = 20),
        strip.text = element_text(size = 22, family = "bold"),
        title = element_text(size = 25, family = "bold"),
        axis.title.x = element_blank(),
        axis.title.y = element_text(vjust = 1.9),
        axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
        legend.position = "none",
        plot.title = element_text(hjust = 0.5),
        plot.margin = unit(c(1,1,1,1), "cm"),
        panel.spacing = unit(1,"lines"))
print(EC10mean)
dev.off()

png("EC10med.png", width = 6000, height = 9000, units = "px", res = 500)
EC10med <- ggplot(CellEC)+
  facet_wrap(.~Gene, ncol = 2)+
  geom_jitter(aes(variable, value),position = position_dodge(0.5), shape=1 )+
  stat_summary(fun.data = min.med.qt.max, geom = "boxplot", aes(x=variable, y=value, fill=Colour))+
  ggtitle("Median")+
  ylab("log2(TPM+1)")+
  scale_fill_manual(values=c("white","gold2"))+
  theme(axis.title = element_text(size = 22),
        axis.text = element_text(size = 20),
        strip.text = element_text(size = 22, family = "bold"),
        title = element_text(size = 25, family = "bold"),
        axis.title.x = element_blank(),
        axis.title.y = element_text(vjust = 1.9),
        axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
        legend.position = "none",
        plot.title = element_text(hjust = 0.5),
        plot.margin = unit(c(1,1,1,1), "cm"),
        panel.spacing = unit(1,"lines"))
print(EC10med)
dev.off()

png("EC10.png", width = 9000, height = 9000, units = "px", res = 500)
ggarrange(EC10mean, EC10med, ncol = 2)
dev.off()


#---------------------------------------
#EE cell type specific Genes
#--------------------------------------

#----- Merging dataframe of mean expression of EE with all the other cell types -----
FC_EEEC <- cbind.data.frame(EE_mean, EC_mean)
FC_EEPNT <- cbind.data.frame(EE_mean, PNT_mean)
FC_EETA<- cbind.data.frame(EE_mean, TA_mean)
FC_EESC <- cbind.data.frame(EE_mean, SC_mean)
FC_EEGB <- cbind.data.frame(EE_mean, GB_mean)
FC_EETFT <- cbind.data.frame(EE_mean, TFT_mean)


#----- Calculate the fold change between Enteroendocrine cells and all the other cell types -----
FC_EEEC <- transform(FC_EEEC, FoldChange=FC_EEEC[,1]/FC_EEEC[,2])
FC_EEPNT <- transform(FC_EEPNT, FoldChange=FC_EEPNT[,1]/FC_EEPNT[,2])
FC_EETA <- transform(FC_EETA, FoldChange=FC_EETA[,1]/FC_EETA[,2])
FC_EESC <- transform(FC_EESC, FoldChange=FC_EESC[,1]/FC_EESC[,2])
FC_EEGB <- transform(FC_EEGB, FoldChange=FC_EEGB[,1]/FC_EEGB[,2])
FC_EETFT <- transform(FC_EETFT, FoldChange=FC_EETFT[,1]/FC_EETFT[,2])


#----- Log transform the data to have a better distribution of the results -----
FC_EEEC$FoldChange <- log2(FC_EEEC$FoldChange)
FC_EEPNT$FoldChange <- log2(FC_EEPNT$FoldChange)
FC_EETA$FoldChange <- log2(FC_EETA$FoldChange)
FC_EESC$FoldChange <- log2(FC_EESC$FoldChange)
FC_EEGB$FoldChange <- log2(FC_EEGB$FoldChange)
FC_EETFT$FoldChange <- log2(FC_EETFT$FoldChange)


#----- Extract the 300 genes with the highest fold change in each fold change analysis for the Enteroendocrine cells -----
FC_EEEC <- rownames(head(FC_EEEC[order(FC_EEEC$FoldChange, decreasing = TRUE),],300))
FC_EEPNT <- rownames(head(FC_EEPNT[order(FC_EEPNT$FoldChange, decreasing = TRUE),],300))
FC_EETA <- rownames(head(FC_EETA[order(FC_EETA$FoldChange, decreasing = TRUE),],300))
FC_EESC <- rownames(head(FC_EESC[order(FC_EESC$FoldChange, decreasing = TRUE),],300))
FC_EEGB <- rownames(head(FC_EEGB[order(FC_EEGB$FoldChange, decreasing = TRUE),],300))
FC_EETFT <- rownames(head(FC_EETFT[order(FC_EETFT$FoldChange, decreasing = TRUE),],300))


#----- Extract the genes found in each analysis -----
EEgene <- intersect(FC_EEEC, FC_EEGB)
EEgene <- intersect(EEgene, FC_EEPNT)
EEgene <- intersect(EEgene, FC_EETA)
EEgene <- intersect(EEgene, FC_EESC)
EEgene <- intersect(EEgene, FC_EETFT)


#----- Extract in the original dataframe with expression data the precedent extracted genes -----
CellEE <- DATASbst[paste(EEgene),]

CompEEmean <- All_mean[,-2]
CompEEmean <- data.frame(apply(CompEEmean, 1, mean))
CompEEmean <- cbind(EE_mean, CompEEmean)
CompEEmean <- transform(CompEEmean, FC=CompEEmean[,1]/CompEEmean[,2])
CompEEmean <- CompEEmean[EEgene,]
CompEEmean <- CompEEmean[order(CompEEmean$FC, decreasing = TRUE),]

CellEE <- CellEE[rownames(head(CompEEmean, 10)),]
CellEE <- log2(CellEE)
CellEE <- cbind(rownames(CellEE), CellEE)
colnames(CellEE)<- c("Gene", 
                     paste("Enterocytes", seq(1:ncol(EC_Sbst))),
                     paste("Endocrine Cells", seq(1:ncol(EE_Sbst))),
                     paste("Paneth Cells", seq(1:ncol(PNT_Sbst))),
                     paste("TA", seq(1:ncol(TA_Sbst))),
                     paste("SC", seq(1:ncol(SC_Sbst))),
                     paste("GB", seq(1:ncol(GB_Sbst))),
                     paste("TFT", seq(1:ncol(TFT_Sbst))))
rownames(CellEE) <- NULL

CellEE <- melt(CellEE, id.vars = "Gene")
CellEE$variable<- c(rep("EC", ncol(EC_Sbst)*10),
                    rep("EE", ncol(EE_Sbst)*10),
                    rep("PNT", ncol(PNT_Sbst)*10),
                    rep("TA", ncol(TA_Sbst)*10),
                    rep("SC", ncol(SC_Sbst)*10),
                    rep("GB", ncol(GB_Sbst)*10),
                    rep("TFT",ncol(TFT_Sbst)*10))


#----- Extract the mean value of the expression of each extracted genes in each cell type -----
AB <- data.frame(NULL)
AC <- data.frame(NULL)
AD <- data.frame(NULL)
AE <- data.frame(NULL)
AF <- data.frame(NULL)
AG <- data.frame(NULL)
AH <- data.frame(NULL)

for (i in rownames(head(CompEEmean, 10))){
  AA <- CellEE[which(CellEE$Gene==i),]
  AB <- rbind(AB, mean(AA[which(AA$variable=="EC"),3]))
  AC <- rbind(AC, mean(AA[which(AA$variable=="EE"),3]))
  AD <- rbind(AD, mean(AA[which(AA$variable=="PNT"),3]))
  AE <- rbind(AE, mean(AA[which(AA$variable=="TA"),3]))
  AF <- rbind(AF, mean(AA[which(AA$variable=="SC"),3]))
  AG <- rbind(AG, mean(AA[which(AA$variable=="GB"),3]))
  AH <- rbind(AH, mean(AA[which(AA$variable=="TFT"),3]))
}
EEgenemean <- cbind.data.frame(rownames(head(CompEEmean, 10)),AB, AC, AD, AE, AF, AG, AH)
colnames(EEgenemean) <- c("Gene","EC","EE","PNT","TA","SC","GB","TFT")
write.csv(EEgenemean, file = "EEmeans.csv")


AB <- data.frame(NULL)
AC <- data.frame(NULL)
AD <- data.frame(NULL)
AE <- data.frame(NULL)
AF <- data.frame(NULL)
AG <- data.frame(NULL)
AH <- data.frame(NULL)


for (i in rownames(head(CompEEmean, 10))){
  AA <- CellEE[which(CellEE$Gene==i),]
  AB <- rbind(AB, median(AA[which(AA$variable=="EC"),3]))
  AC <- rbind(AC, median(AA[which(AA$variable=="EE"),3]))
  AD <- rbind(AD, median(AA[which(AA$variable=="PNT"),3]))
  AE <- rbind(AE, median(AA[which(AA$variable=="TA"),3]))
  AF <- rbind(AF, median(AA[which(AA$variable=="SC"),3]))
  AG <- rbind(AG, median(AA[which(AA$variable=="GB"),3]))
  AH <- rbind(AH, median(AA[which(AA$variable=="TFT"),3]))
}
EEgenemedian <- cbind.data.frame(rownames(head(CompEEmean, 10)),AB, AC, AD, AE, AF, AG, AH)
colnames(EEgenemedian) <- c("Gene","EC","EE","PNT","TA","SC","GB","TFT")
write.csv(EEgenemedian, file = "EEmedian.csv")


#----- Create plots of the cell type specific genes -----
CellEE$variable<- c(rep("Enterocytes", ncol(EC_Sbst)*10),
                    rep("Endocrine Cells", ncol(EE_Sbst)*10),
                    rep("Paneth Cells", ncol(PNT_Sbst)*10),
                    rep("TA Cells", ncol(TA_Sbst)*10),
                    rep("Stem Cells", ncol(SC_Sbst)*10),
                    rep("Goblet Cells", ncol(GB_Sbst)*10),
                    rep("Tuft Cells",ncol(TFT_Sbst)*10))

CellEE$Colour <-  ifelse(CellEE$variable == "Endocrine Cells", paste("Color2"), paste("Color1"))


png("EE10mean.png", width = 6000, height = 9000, units = "px", res = 500)
EE10mean <- ggplot(CellEE)+
  facet_wrap(.~Gene, ncol = 2)+
  geom_jitter(aes(variable, value),position = position_dodge(0.5), shape=NA )+
  stat_summary(fun.data = min.mean.sd.max, geom = "boxplot", aes(x=variable, y=value, fill=Colour))+
  ggtitle("Mean")+
  ylab("log2(TPM+1)")+
  scale_fill_manual(values=c("white","gold2"))+
  theme(axis.title = element_text(size = 22),
        axis.text = element_text(size = 20),
        strip.text = element_text(size = 22, family = "bold"),
        title = element_text(size = 25, family = "bold"),
        axis.title.x = element_blank(),
        axis.title.y = element_text(vjust = 1.9),
        axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
        legend.position = "none",
        plot.title = element_text(hjust = 0.5),
        plot.margin = unit(c(1,1,1,1), "cm"),
        panel.spacing = unit(1,"lines"))
print(EE10mean)
dev.off()

png("EE10med.png", width = 6000, height = 9000, units = "px", res = 500)
EE10med <- ggplot(CellEE)+
  facet_wrap(.~Gene, ncol = 2)+
  geom_jitter(aes(variable, value),position = position_dodge(0.5), shape=1 )+
  stat_summary(fun.data = min.med.qt.max, geom = "boxplot", aes(x=variable, y=value, fill=Colour))+
  ggtitle("Median")+
  ylab("log2(TPM+1)")+
  scale_fill_manual(values=c("white","gold2"))+
  theme(axis.title = element_text(size = 22),
        axis.text = element_text(size = 20),
        strip.text = element_text(size = 22, family = "bold"),
        title = element_text(size = 25, family = "bold"),
        axis.title.x = element_blank(),
        axis.title.y = element_text(vjust = 1.9),
        axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
        legend.position = "none",
        plot.title = element_text(hjust = 0.5),
        plot.margin = unit(c(1,1,1,1), "cm"),
        panel.spacing = unit(1,"lines"))
print(EE10med)
dev.off()

png("EE.png", width = 9000, height = 9000, units = "px", res = 500)
ggarrange(EE10mean, EE10med, ncol = 2)
dev.off()



#---------------------------------------
#Paneth Cells cell type specific Genes
#--------------------------------------


#----- Merging dataframe of mean expression of PNT with all the other cell types -----
FC_PNTEC <- cbind.data.frame(PNT_mean, EC_mean)
FC_PNTEE <- cbind.data.frame(PNT_mean, EE_mean)
FC_PNTTA<- cbind.data.frame(PNT_mean, TA_mean)
FC_PNTSC <- cbind.data.frame(PNT_mean, SC_mean)
FC_PNTGB <- cbind.data.frame(PNT_mean, GB_mean)
FC_PNTTFT <- cbind.data.frame(PNT_mean, TFT_mean)


#----- Calculate the fold change between Paneth cells and all the other cell types -----
FC_PNTEC <- transform(FC_PNTEC, FoldChange=FC_PNTEC[,1]/FC_PNTEC[,2])
FC_PNTEE <- transform(FC_PNTEE, FoldChange=FC_PNTEE[,1]/FC_PNTEE[,2])
FC_PNTTA <- transform(FC_PNTTA, FoldChange=FC_PNTTA[,1]/FC_PNTTA[,2])
FC_PNTSC <- transform(FC_PNTSC, FoldChange=FC_PNTSC[,1]/FC_PNTSC[,2])
FC_PNTGB <- transform(FC_PNTGB, FoldChange=FC_PNTGB[,1]/FC_PNTGB[,2])
FC_PNTTFT <- transform(FC_PNTTFT, FoldChange=FC_PNTTFT[,1]/FC_PNTTFT[,2])


#----- Log transform the data to have a better distribution of the results -----
FC_PNTEC$FoldChange <- log2(FC_PNTEC$FoldChange)
FC_PNTEE$FoldChange <- log2(FC_PNTEE$FoldChange)
FC_PNTTA$FoldChange <- log2(FC_PNTTA$FoldChange)
FC_PNTSC$FoldChange <- log2(FC_PNTSC$FoldChange)
FC_PNTGB$FoldChange <- log2(FC_PNTGB$FoldChange)
FC_PNTTFT$FoldChange <- log2(FC_PNTTFT$FoldChange)


#----- Extract the 300 genes with the highest fold change in each fold change analysis for the Paneth -----
FC_PNTEC <- rownames(head(FC_PNTEC[order(FC_PNTEC$FoldChange, decreasing = TRUE),],300))
FC_PNTEE <- rownames(head(FC_PNTEE[order(FC_PNTEE$FoldChange, decreasing = TRUE),],300))
FC_PNTTA <- rownames(head(FC_PNTTA[order(FC_PNTTA$FoldChange, decreasing = TRUE),],300))
FC_PNTSC <- rownames(head(FC_PNTSC[order(FC_PNTSC$FoldChange, decreasing = TRUE),],300))
FC_PNTGB <- rownames(head(FC_PNTGB[order(FC_PNTGB$FoldChange, decreasing = TRUE),],300))
FC_PNTTFT <- rownames(head(FC_PNTTFT[order(FC_PNTTFT$FoldChange, decreasing = TRUE),],300))


#----- Extract the genes found in each analysis -----
PNTgene <- intersect(FC_PNTEC, FC_PNTGB)
PNTgene <- intersect(PNTgene, FC_PNTEE)
PNTgene <- intersect(PNTgene, FC_PNTTA)
PNTgene <- intersect(PNTgene, FC_PNTSC)
PNTgene <- intersect(PNTgene, FC_PNTTFT)


#----- Extract in the original dataframe with expression data the precedent extracted genes -----
CellPNT <- DATASbst[paste(PNTgene),]

CompPNTmean <- All_mean[,-3]
CompPNTmean <- data.frame(apply(CompPNTmean, 1, mean))
CompPNTmean <- cbind(PNT_mean, CompPNTmean)
CompPNTmean <- transform(CompPNTmean, FC=CompPNTmean[,1]/CompPNTmean[,2])
CompPNTmean <- CompPNTmean[PNTgene,]
CompPNTmean <- CompPNTmean[order(CompPNTmean$FC, decreasing = TRUE),]

CellPNT <- CellPNT[rownames(head(CompPNTmean, 10)),]
CellPNT <- log2(CellPNT)
CellPNT <- cbind(rownames(CellPNT), CellPNT)
colnames(CellPNT)<- c("Gene", 
                      paste("Enterocytes", seq(1:ncol(EC_Sbst))),
                      paste("Endocrine Cells", seq(1:ncol(EE_Sbst))),
                      paste("Paneth Cells", seq(1:ncol(PNT_Sbst))),
                      paste("TA", seq(1:ncol(TA_Sbst))),
                      paste("SC", seq(1:ncol(SC_Sbst))),
                      paste("GB", seq(1:ncol(GB_Sbst))),
                      paste("TFT", seq(1:ncol(TFT_Sbst))))
rownames(CellPNT) <- NULL

CellPNT <- melt(CellPNT, id.vars = "Gene")
CellPNT$variable<- c(rep("EC", ncol(EC_Sbst)*10),
                     rep("EE", ncol(EE_Sbst)*10),
                     rep("PNT", ncol(PNT_Sbst)*10),
                     rep("TA", ncol(TA_Sbst)*10),
                     rep("SC", ncol(SC_Sbst)*10),
                     rep("GB", ncol(GB_Sbst)*10),
                     rep("TFT",ncol(TFT_Sbst)*10))


#----- Extract the mean value of the expression of each extracted genes in each cell type -----
AB <- data.frame(NULL)
AC <- data.frame(NULL)
AD <- data.frame(NULL)
AE <- data.frame(NULL)
AF <- data.frame(NULL)
AG <- data.frame(NULL)
AH <- data.frame(NULL)

for (i in rownames(head(CompPNTmean, 10))){
  AA <- CellPNT[which(CellPNT$Gene==i),]
  AB <- rbind(AB, mean(AA[which(AA$variable=="EC"),3]))
  AC <- rbind(AC, mean(AA[which(AA$variable=="EE"),3]))
  AD <- rbind(AD, mean(AA[which(AA$variable=="PNT"),3]))
  AE <- rbind(AE, mean(AA[which(AA$variable=="TA"),3]))
  AF <- rbind(AF, mean(AA[which(AA$variable=="SC"),3]))
  AG <- rbind(AG, mean(AA[which(AA$variable=="GB"),3]))
  AH <- rbind(AH, mean(AA[which(AA$variable=="TFT"),3]))
}
PNTgenemean <- cbind.data.frame(rownames(head(CompPNTmean, 10)),AB, AC, AD, AE, AF, AG, AH)
colnames(PNTgenemean) <- c("Gene","EC","EE","PNT","TA","SC","GB","TFT")
write.csv(PNTgenemean, file = "PNTmeans.csv")


AB <- data.frame(NULL)
AC <- data.frame(NULL)
AD <- data.frame(NULL)
AE <- data.frame(NULL)
AF <- data.frame(NULL)
AG <- data.frame(NULL)
AH <- data.frame(NULL)


for (i in rownames(head(CompPNTmean, 10))){
  AA <- CellPNT[which(CellPNT$Gene==i),]
  AB <- rbind(AB, median(AA[which(AA$variable=="EC"),3]))
  AC <- rbind(AC, median(AA[which(AA$variable=="EE"),3]))
  AD <- rbind(AD, median(AA[which(AA$variable=="PNT"),3]))
  AE <- rbind(AE, median(AA[which(AA$variable=="TA"),3]))
  AF <- rbind(AF, median(AA[which(AA$variable=="SC"),3]))
  AG <- rbind(AG, median(AA[which(AA$variable=="GB"),3]))
  AH <- rbind(AH, median(AA[which(AA$variable=="TFT"),3]))
}
PNTgenemedian <- cbind.data.frame(rownames(head(CompPNTmean, 10)),AB, AC, AD, AE, AF, AG, AH)
colnames(PNTgenemedian) <- c("Gene","EC","EE","PNT","TA","SC","GB","TFT")
write.csv(PNTgenemedian, file = "PNTmedian.csv")


#----- Create plots of the cell type specific genes -----
CellPNT$variable<- c(rep("Enterocytes", ncol(EC_Sbst)*10),
                     rep("Endocrine Cells", ncol(EE_Sbst)*10),
                     rep("Paneth Cells", ncol(PNT_Sbst)*10),
                     rep("TA Cells", ncol(TA_Sbst)*10),
                     rep("Stem Cells", ncol(SC_Sbst)*10),
                     rep("Goblet Cells", ncol(GB_Sbst)*10),
                     rep("Tuft Cells",ncol(TFT_Sbst)*10))

CellPNT$Colour <-  ifelse(CellPNT$variable == "Paneth Cells", paste("Color2"), paste("Color1"))


png("PNT10mean.png", width = 6000, height = 9000, units = "px", res = 500)
PNT10mean <- ggplot(CellPNT)+
  facet_wrap(.~Gene, ncol = 2)+
  geom_jitter(aes(variable, value),position = position_dodge(0.5), shape=NA )+
  stat_summary(fun.data = min.mean.sd.max, geom = "boxplot", aes(x=variable, y=value, fill=Colour))+
  ggtitle("Mean")+
  ylab("log2(TPM+1)")+
  scale_fill_manual(values=c("white","gold2"))+
  theme(axis.title = element_text(size = 22),
        axis.text = element_text(size = 20),
        strip.text = element_text(size = 22, family = "bold"),
        title = element_text(size = 25, family = "bold"),
        axis.title.x = element_blank(),
        axis.title.y = element_text(vjust = 1.9),
        axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
        legend.position = "none",
        plot.title = element_text(hjust = 0.5),
        plot.margin = unit(c(1,1,1,1), "cm"),
        panel.spacing = unit(1,"lines"))
print(PNT10mean)
dev.off()

png("PNT10med.png", width = 6000, height = 9000, units = "px", res = 500)
PNT10med <- ggplot(CellPNT)+
  facet_wrap(.~Gene, ncol = 2)+
  geom_jitter(aes(variable, value),position = position_dodge(0.5), shape=1 )+
  stat_summary(fun.data = min.med.qt.max, geom = "boxplot", aes(x=variable, y=value, fill=Colour))+
  ggtitle("Median")+
  ylab("log2(TPM+1)")+
  scale_fill_manual(values=c("white","gold2"))+
  theme(axis.title = element_text(size = 22),
        axis.text = element_text(size = 20),
        strip.text = element_text(size = 22, family = "bold"),
        title = element_text(size = 25, family = "bold"),
        axis.title.x = element_blank(),
        axis.title.y = element_text(vjust = 1.9),
        axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
        legend.position = "none",
        plot.title = element_text(hjust = 0.5),
        plot.margin = unit(c(1,1,1,1), "cm"),
        panel.spacing = unit(1,"lines"))
print(PNT10med)
dev.off()

png("PNT.png", width = 9000, height = 9000, units = "px", res = 500)
ggarrange(PNT10mean, PNT10med, ncol = 2)
dev.off()




#---------------------------------------
#Stem Cells cell type specific Genes
#--------------------------------------


#----- Merging dataframe of mean expression of SC with all the other cell types -----
FC_SCEC <- cbind.data.frame(SC_mean, EC_mean)
FC_SCEE <- cbind.data.frame(SC_mean, EE_mean)
FC_SCTA<- cbind.data.frame(SC_mean, TA_mean)
FC_SCPNT <- cbind.data.frame(SC_mean, PNT_mean)
FC_SCGB <- cbind.data.frame(SC_mean, GB_mean)
FC_SCTFT <- cbind.data.frame(SC_mean, TFT_mean)


#----- Calculate the fold change between Stem cells and all the other cell types -----
FC_SCEC <- transform(FC_SCEC, FoldChange=FC_SCEC[,1]/FC_SCEC[,2])
FC_SCEE <- transform(FC_SCEE, FoldChange=FC_SCEE[,1]/FC_SCEE[,2])
FC_SCTA <- transform(FC_SCTA, FoldChange=FC_SCTA[,1]/FC_SCTA[,2])
FC_SCPNT <- transform(FC_SCPNT, FoldChange=FC_SCPNT[,1]/FC_SCPNT[,2])
FC_SCGB <- transform(FC_SCGB, FoldChange=FC_SCGB[,1]/FC_SCGB[,2])
FC_SCTFT <- transform(FC_SCTFT, FoldChange=FC_SCTFT[,1]/FC_SCTFT[,2])


#----- Log transform the data to have a better distribution of the results -----
FC_SCEC$FoldChange <- log2(FC_SCEC$FoldChange)
FC_SCEE$FoldChange <- log2(FC_SCEE$FoldChange)
FC_SCTA$FoldChange <- log2(FC_SCTA$FoldChange)
FC_SCPNT$FoldChange <- log2(FC_SCPNT$FoldChange)
FC_SCGB$FoldChange <- log2(FC_SCGB$FoldChange)
FC_SCTFT$FoldChange <- log2(FC_SCTFT$FoldChange)


#----- Extract the 300 genes with the highest fold change in each fold change analysis for the Stem cells -----
FC_SCEC <- rownames(head(FC_SCEC[order(FC_SCEC$FoldChange, decreasing = TRUE),],300))
FC_SCEE <- rownames(head(FC_SCEE[order(FC_SCEE$FoldChange, decreasing = TRUE),],300))
FC_SCTA <- rownames(head(FC_SCTA[order(FC_SCTA$FoldChange, decreasing = TRUE),],300))
FC_SCPNT <- rownames(head(FC_SCPNT[order(FC_SCPNT$FoldChange, decreasing = TRUE),],300))
FC_SCGB <- rownames(head(FC_SCGB[order(FC_SCGB$FoldChange, decreasing = TRUE),],300))
FC_SCTFT <- rownames(head(FC_SCTFT[order(FC_SCTFT$FoldChange, decreasing = TRUE),],300))


#----- Extract the genes found in each analysis -----
SCgene <- intersect(FC_SCEC, FC_SCGB)
SCgene <- intersect(SCgene, FC_SCEE)
SCgene <- intersect(SCgene, FC_SCTA)
SCgene <- intersect(SCgene, FC_SCPNT)
SCgene <- intersect(SCgene, FC_SCTFT)


#----- Extract in the original dataframe with expression data the precedent extracted genes -----
CellSC <- DATASbst[paste(SCgene),]

CompSCmean <- All_mean[,-5]
CompSCmean <- data.frame(apply(CompSCmean, 1, mean))
CompSCmean <- cbind(SC_mean, CompSCmean)
CompSCmean <- transform(CompSCmean, FC=CompSCmean[,1]/CompSCmean[,2])
CompSCmean <- CompSCmean[SCgene,]
CompSCmean <- CompSCmean[order(CompSCmean$FC, decreasing = TRUE),]

CellSC <- CellSC[rownames(head(CompSCmean, 10)),]
CellSC <- rbind(CellSC, DATASbst[c("Lgr5", "Ascl2", "Cd44"),])
GenesSCadd <- rownames(CellSC)
CellSC <- log2(CellSC)
CellSC <- cbind(rownames(CellSC), CellSC)
colnames(CellSC)<- c("Gene", 
                     paste("Enterocytes", seq(1:ncol(EC_Sbst))),
                     paste("Endocrine Cells", seq(1:ncol(EE_Sbst))),
                     paste("Paneth Cells", seq(1:ncol(PNT_Sbst))),
                     paste("TA", seq(1:ncol(TA_Sbst))),
                     paste("SC", seq(1:ncol(SC_Sbst))),
                     paste("GB", seq(1:ncol(GB_Sbst))),
                     paste("TFT", seq(1:ncol(TFT_Sbst))))
rownames(CellSC) <- NULL

CellSC <- melt(CellSC, id.vars = "Gene")
CellSC$variable<- c(rep("EC", ncol(EC_Sbst)*10),
                    rep("EE", ncol(EE_Sbst)*10),
                    rep("PNT", ncol(PNT_Sbst)*10),
                    rep("TA", ncol(TA_Sbst)*10),
                    rep("SC", ncol(SC_Sbst)*10),
                    rep("GB", ncol(GB_Sbst)*10),
                    rep("TFT",ncol(TFT_Sbst)*10))


#----- Extract the mean value of the expression of each extracted genes in each cell type -----
AB <- data.frame(NULL)
AC <- data.frame(NULL)
AD <- data.frame(NULL)
AE <- data.frame(NULL)
AF <- data.frame(NULL)
AG <- data.frame(NULL)
AH <- data.frame(NULL)

for (i in GenesSCadd){
  AA <- CellSC[which(CellSC$Gene==i),]
  AB <- rbind(AB, mean(AA[which(AA$variable=="EC"),3]))
  AC <- rbind(AC, mean(AA[which(AA$variable=="EE"),3]))
  AD <- rbind(AD, mean(AA[which(AA$variable=="PNT"),3]))
  AE <- rbind(AE, mean(AA[which(AA$variable=="TA"),3]))
  AF <- rbind(AF, mean(AA[which(AA$variable=="SC"),3]))
  AG <- rbind(AG, mean(AA[which(AA$variable=="GB"),3]))
  AH <- rbind(AH, mean(AA[which(AA$variable=="TFT"),3]))
}
SCgenemean <- cbind.data.frame(GenesSCadd,AB, AC, AD, AE, AF, AG, AH)
colnames(SCgenemean) <- c("Gene","EC","EE","PNT","TA","SC","GB","TFT")
write.csv(SCgenemean, file = "SCmeans.csv")


AB <- data.frame(NULL)
AC <- data.frame(NULL)
AD <- data.frame(NULL)
AE <- data.frame(NULL)
AF <- data.frame(NULL)
AG <- data.frame(NULL)
AH <- data.frame(NULL)


for (i in GenesSCadd){
  AA <- CellSC[which(CellSC$Gene==i),]
  AB <- rbind(AB, median(AA[which(AA$variable=="EC"),3]))
  AC <- rbind(AC, median(AA[which(AA$variable=="EE"),3]))
  AD <- rbind(AD, median(AA[which(AA$variable=="PNT"),3]))
  AE <- rbind(AE, median(AA[which(AA$variable=="TA"),3]))
  AF <- rbind(AF, median(AA[which(AA$variable=="SC"),3]))
  AG <- rbind(AG, median(AA[which(AA$variable=="GB"),3]))
  AH <- rbind(AH, median(AA[which(AA$variable=="TFT"),3]))
}
SCgenemedian <- cbind.data.frame(GenesSCadd,AB, AC, AD, AE, AF, AG, AH)
colnames(SCgenemedian) <- c("Gene","EC","EE","PNT","TA","SC","GB","TFT")
write.csv(SCgenemedian, file = "SCmedian.csv")



#----- Create plots of the cell type specific genes -----
CellSC$variable<- c(rep("Enterocytes", ncol(EC_Sbst)*10),
                    rep("Endocrine Cells", ncol(EE_Sbst)*10),
                    rep("Paneth Cells", ncol(PNT_Sbst)*10),
                    rep("TA Cells", ncol(TA_Sbst)*10),
                    rep("Stem Cells", ncol(SC_Sbst)*10),
                    rep("Goblet Cells", ncol(GB_Sbst)*10),
                    rep("Tuft Cells",ncol(TFT_Sbst)*10))

CellSC$Colour <-  ifelse(CellSC$variable == "Stem Cells", paste("Color2"), paste("Color1"))


png("SC10mean.png", width = 6000, height = 9000, units = "px", res = 500)
SC10mean <- ggplot(CellSC)+
  facet_wrap(.~Gene, ncol = 2)+
  geom_jitter(aes(variable, value),position = position_dodge(0.5), shape=NA )+
  stat_summary(fun.data = min.mean.sd.max, geom = "boxplot", aes(x=variable, y=value, fill=Colour))+
  ggtitle("Mean")+
  ylab("log2(TPM+1)")+
  scale_fill_manual(values=c("white","gold2"))+
  theme(axis.title = element_text(size = 22),
        axis.text = element_text(size = 20),
        strip.text = element_text(size = 22, family = "bold"),
        title = element_text(size = 25, family = "bold"),
        axis.title.x = element_blank(),
        axis.title.y = element_text(vjust = 2),
        axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
        legend.position = "none",
        plot.title = element_text(hjust = 0.5),
        plot.margin = unit(c(1,1,1,1), "cm"),
        panel.spacing = unit(1,"lines"))
print(SC10mean)
dev.off()

png("SC10med.png", width = 6000, height = 9000, units = "px", res = 500)
SC10med <- ggplot(CellSC)+
  facet_wrap(.~Gene, ncol = 2)+
  geom_jitter(aes(variable, value),position = position_dodge(0.5), shape=1 )+
  stat_summary(fun.data = min.med.qt.max, geom = "boxplot", aes(x=variable, y=value, fill=Colour))+
  ggtitle("Median")+
  ylab("log2(TPM+1)")+
  scale_fill_manual(values=c("white","gold2"))+
  theme(axis.title = element_text(size = 22),
        axis.text = element_text(size = 20),
        strip.text = element_text(size = 22, family = "bold"),
        title = element_text(size = 25, family = "bold"),
        axis.title.x = element_blank(),
        axis.title.y = element_text(vjust = 2),
        axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
        legend.position = "none",
        plot.title = element_text(hjust = 0.5),
        plot.margin = unit(c(1,1,1,1), "cm"),
        panel.spacing = unit(1,"lines"))
print(SC10med)
dev.off()

png("SC.png", width = 9000, height = 9000, units = "px", res = 500)
ggarrange(SC10mean, SC10med, ncol = 2)
dev.off()



#---------------------------------------
#Goblet Cells cell type specific Genes
#--------------------------------------


#----- Merging dataframe of mean expression of GB with all the other cell types -----
FC_GBEC <- cbind.data.frame(GB_mean, EC_mean)
FC_GBEE <- cbind.data.frame(GB_mean, EE_mean)
FC_GBTA<- cbind.data.frame(GB_mean, TA_mean)
FC_GBPNT <- cbind.data.frame(GB_mean, PNT_mean)
FC_GBSC <- cbind.data.frame(GB_mean, SC_mean)
FC_GBTFT <- cbind.data.frame(GB_mean, TFT_mean)

#----- Calculate the fold change between Goblet cells and all the other cell types -----
FC_GBEC <- transform(FC_GBEC, FoldChange=FC_GBEC[,1]/FC_GBEC[,2])
FC_GBEE <- transform(FC_GBEE, FoldChange=FC_GBEE[,1]/FC_GBEE[,2])
FC_GBTA <- transform(FC_GBTA, FoldChange=FC_GBTA[,1]/FC_GBTA[,2])
FC_GBPNT <- transform(FC_GBPNT, FoldChange=FC_GBPNT[,1]/FC_GBPNT[,2])
FC_GBSC <- transform(FC_GBSC, FoldChange=FC_GBSC[,1]/FC_GBSC[,2])
FC_GBTFT <- transform(FC_GBTFT, FoldChange=FC_GBTFT[,1]/FC_GBTFT[,2])

#----- Log transform the data to have a better distribution of the results -----
FC_GBEC$FoldChange <- log2(FC_GBEC$FoldChange)
FC_GBEE$FoldChange <- log2(FC_GBEE$FoldChange)
FC_GBTA$FoldChange <- log2(FC_GBTA$FoldChange)
FC_GBPNT$FoldChange <- log2(FC_GBPNT$FoldChange)
FC_GBSC$FoldChange <- log2(FC_GBSC$FoldChange)
FC_GBTFT$FoldChange <- log2(FC_GBTFT$FoldChange)


#----- Extract the 300 genes with the highest fold change in each fold change analysis for the Goblet cells -----
FC_GBEC <- rownames(head(FC_GBEC[order(FC_GBEC$FoldChange, decreasing = TRUE),],300))
FC_GBEE <- rownames(head(FC_GBEE[order(FC_GBEE$FoldChange, decreasing = TRUE),],300))
FC_GBTA <- rownames(head(FC_GBTA[order(FC_GBTA$FoldChange, decreasing = TRUE),],300))
FC_GBPNT <- rownames(head(FC_GBPNT[order(FC_GBPNT$FoldChange, decreasing = TRUE),],300))
FC_GBSC <- rownames(head(FC_GBSC[order(FC_GBSC$FoldChange, decreasing = TRUE),],300))
FC_GBTFT <- rownames(head(FC_GBTFT[order(FC_GBTFT$FoldChange, decreasing = TRUE),],300))


#----- Extract the genes found in each analysis -----
GBgene <- intersect(FC_GBEC, FC_GBSC)
GBgene <- intersect(GBgene, FC_GBEE)
GBgene <- intersect(GBgene, FC_GBTA)
GBgene <- intersect(GBgene, FC_GBPNT)
GBgene <- intersect(GBgene, FC_GBTFT)


#----- Extract in the original dataframe with expression data the precedent extracted genes -----
CellGB <- DATASbst[paste(GBgene),]

CompGBmean <- All_mean[,-6]
CompGBmean <- data.frame(apply(CompGBmean, 1, mean))
CompGBmean <- cbind(GB_mean, CompGBmean)
CompGBmean <- transform(CompGBmean, FC=CompGBmean[,1]/CompGBmean[,2])
CompGBmean <- CompGBmean[GBgene,]
CompGBmean <- CompGBmean[order(CompGBmean$FC, decreasing = TRUE),]

CellGB <- CellGB[rownames(head(CompGBmean, 10)),]
GenesSCadd <- rownames(CellGB)
CellGB <- log2(CellGB)
CellGB <- cbind(rownames(CellGB), CellGB)
colnames(CellGB)<- c("Gene", 
                     paste("Enterocytes", seq(1:ncol(EC_Sbst))),
                     paste("Endocrine Cells", seq(1:ncol(EE_Sbst))),
                     paste("Paneth Cells", seq(1:ncol(PNT_Sbst))),
                     paste("TA", seq(1:ncol(TA_Sbst))),
                     paste("SC", seq(1:ncol(SC_Sbst))),
                     paste("GB", seq(1:ncol(GB_Sbst))),
                     paste("TFT", seq(1:ncol(TFT_Sbst))))
rownames(CellGB) <- NULL

CellGB <- melt(CellGB, id.vars = "Gene")
CellGB$variable<- c(rep("EC", ncol(EC_Sbst)*10),
                    rep("EE", ncol(EE_Sbst)*10),
                    rep("PNT", ncol(PNT_Sbst)*10),
                    rep("TA", ncol(TA_Sbst)*10),
                    rep("SC", ncol(SC_Sbst)*10),
                    rep("GB", ncol(GB_Sbst)*10),
                    rep("TFT",ncol(TFT_Sbst)*10))


#----- Extract the mean value of the expression of each extracted genes in each cell type -----
AB <- data.frame(NULL)
AC <- data.frame(NULL)
AD <- data.frame(NULL)
AE <- data.frame(NULL)
AF <- data.frame(NULL)
AG <- data.frame(NULL)
AH <- data.frame(NULL)

for (i in GenesSCadd){
  AA <- CellGB[which(CellGB$Gene==i),]
  AB <- rbind(AB, mean(AA[which(AA$variable=="EC"),3]))
  AC <- rbind(AC, mean(AA[which(AA$variable=="EE"),3]))
  AD <- rbind(AD, mean(AA[which(AA$variable=="PNT"),3]))
  AE <- rbind(AE, mean(AA[which(AA$variable=="TA"),3]))
  AF <- rbind(AF, mean(AA[which(AA$variable=="SC"),3]))
  AG <- rbind(AG, mean(AA[which(AA$variable=="GB"),3]))
  AH <- rbind(AH, mean(AA[which(AA$variable=="TFT"),3]))
}
GBgenemean <- cbind.data.frame(GenesSCadd,AB, AC, AD, AE, AF, AG, AH)
colnames(GBgenemean) <- c("Gene","EC","EE","PNT","TA","SC","GB","TFT")
write.csv(GBgenemean, file = "GBmeans.csv")


AB <- data.frame(NULL)
AC <- data.frame(NULL)
AD <- data.frame(NULL)
AE <- data.frame(NULL)
AF <- data.frame(NULL)
AG <- data.frame(NULL)
AH <- data.frame(NULL)


for (i in GenesSCadd){
  AA <- CellGB[which(CellGB$Gene==i),]
  AB <- rbind(AB, median(AA[which(AA$variable=="EC"),3]))
  AC <- rbind(AC, median(AA[which(AA$variable=="EE"),3]))
  AD <- rbind(AD, median(AA[which(AA$variable=="PNT"),3]))
  AE <- rbind(AE, median(AA[which(AA$variable=="TA"),3]))
  AF <- rbind(AF, median(AA[which(AA$variable=="SC"),3]))
  AG <- rbind(AG, median(AA[which(AA$variable=="GB"),3]))
  AH <- rbind(AH, median(AA[which(AA$variable=="TFT"),3]))
}
GBgenemedian <- cbind.data.frame(GenesSCadd,AB, AC, AD, AE, AF, AG, AH)
colnames(GBgenemedian) <- c("Gene","EC","EE","PNT","TA","SC","GB","TFT")
write.csv(GBgenemedian, file = "GBmedian.csv")



#----- Create plots of the cell type specific genes -----
CellGB$variable<- c(rep("Enterocytes", ncol(EC_Sbst)*10),
                    rep("Endocrine Cells", ncol(EE_Sbst)*10),
                    rep("Paneth Cells", ncol(PNT_Sbst)*10),
                    rep("TA Cells", ncol(TA_Sbst)*10),
                    rep("Stem Cells", ncol(SC_Sbst)*10),
                    rep("Goblet Cells", ncol(GB_Sbst)*10),
                    rep("Tuft Cells",ncol(TFT_Sbst)*10))

CellGB$Colour <-  ifelse(CellGB$variable == "Goblet Cells", paste("Color2"), paste("Color1"))


png("GB10mean.png", width = 6000, height = 9000, units = "px", res = 500)
GB10mean <- ggplot(CellGB)+
  facet_wrap(.~Gene, ncol = 2)+
  geom_jitter(aes(variable, value),position = position_dodge(0.5), shape=NA )+
  stat_summary(fun.data = min.mean.sd.max, geom = "boxplot", aes(x=variable, y=value, fill=Colour))+
  ggtitle("Mean")+
  ylab("log2(TPM+1)")+
  scale_fill_manual(values=c("white","gold2"))+
  theme(axis.title = element_text(size = 22),
        axis.text = element_text(size = 20),
        strip.text = element_text(size = 22, family = "bold"),
        title = element_text(size = 25, family = "bold"),
        axis.title.x = element_blank(),
        axis.title.y = element_text(vjust = 2),
        axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
        legend.position = "none",
        plot.title = element_text(hjust = 0.5),
        plot.margin = unit(c(1,1,1,1), "cm"),
        panel.spacing = unit(1,"lines"))
print(GB10mean)
dev.off()

png("GB10med.png", width = 6000, height = 9000, units = "px", res = 500)
GB10med <- ggplot(CellGB)+
  facet_wrap(.~Gene, ncol = 2)+
  geom_jitter(aes(variable, value),position = position_dodge(0.5), shape=1 )+
  stat_summary(fun.data = min.med.qt.max, geom = "boxplot", aes(x=variable, y=value, fill=Colour))+
  ggtitle("Median")+
  ylab("log2(TPM+1)")+
  scale_fill_manual(values=c("white","gold2"))+
  theme(axis.title = element_text(size = 22),
        axis.text = element_text(size = 20),
        strip.text = element_text(size = 22, family = "bold"),
        title = element_text(size = 25, family = "bold"),
        axis.title.x = element_blank(),
        axis.title.y = element_text(vjust = 2),
        axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
        legend.position = "none",
        plot.title = element_text(hjust = 0.5),
        plot.margin = unit(c(1,1,1,1), "cm"),
        panel.spacing = unit(1,"lines"))
print(GB10med)
dev.off()

png("GB.png", width = 9000, height = 9000, units = "px", res = 500)
ggarrange(GB10mean, GB10med, ncol = 2)
dev.off()


#---------------------------------------
#Tuft Cells cell type specific Genes
#--------------------------------------


#----- Merging dataframe of mean expression of TFT with all the other cell types -----
FC_TFTEC <- cbind.data.frame(TFT_mean, EC_mean)
FC_TFTEE <- cbind.data.frame(TFT_mean, EE_mean)
FC_TFTTA<- cbind.data.frame(TFT_mean, TA_mean)
FC_TFTPNT <- cbind.data.frame(TFT_mean, PNT_mean)
FC_TFTSC <- cbind.data.frame(TFT_mean, SC_mean)
FC_TFTGB <- cbind.data.frame(TFT_mean, GB_mean)


#----- Calculate the fold change between Tuft cells and all the other cell types -----
FC_TFTEC <- transform(FC_TFTEC, FoldChange=FC_TFTEC[,1]/FC_TFTEC[,2])
FC_TFTEE <- transform(FC_TFTEE, FoldChange=FC_TFTEE[,1]/FC_TFTEE[,2])
FC_TFTTA <- transform(FC_TFTTA, FoldChange=FC_TFTTA[,1]/FC_TFTTA[,2])
FC_TFTPNT <- transform(FC_TFTPNT, FoldChange=FC_TFTPNT[,1]/FC_TFTPNT[,2])
FC_TFTSC <- transform(FC_TFTSC, FoldChange=FC_TFTSC[,1]/FC_TFTSC[,2])
FC_TFTGB <- transform(FC_TFTGB, FoldChange=FC_TFTGB[,1]/FC_TFTGB[,2])


#----- Log transform the data to have a better distribution of the results -----
FC_TFTEC$FoldChange <- log2(FC_TFTEC$FoldChange)
FC_TFTEE$FoldChange <- log2(FC_TFTEE$FoldChange)
FC_TFTTA$FoldChange <- log2(FC_TFTTA$FoldChange)
FC_TFTPNT$FoldChange <- log2(FC_TFTPNT$FoldChange)
FC_TFTSC$FoldChange <- log2(FC_TFTSC$FoldChange)
FC_TFTGB$FoldChange <- log2(FC_TFTGB$FoldChange)


#----- Extract the 300 genes with the highest fold change in each fold change analysis for the Tuft cells -----
FC_TFTEC <- rownames(head(FC_TFTEC[order(FC_TFTEC$FoldChange, decreasing = TRUE),],300))
FC_TFTEE <- rownames(head(FC_TFTEE[order(FC_TFTEE$FoldChange, decreasing = TRUE),],300))
FC_TFTTA <- rownames(head(FC_TFTTA[order(FC_TFTTA$FoldChange, decreasing = TRUE),],300))
FC_TFTPNT <- rownames(head(FC_TFTPNT[order(FC_TFTPNT$FoldChange, decreasing = TRUE),],300))
FC_TFTSC <- rownames(head(FC_TFTSC[order(FC_TFTSC$FoldChange, decreasing = TRUE),],300))
FC_TFTGB <- rownames(head(FC_TFTGB[order(FC_TFTGB$FoldChange, decreasing = TRUE),],300))


#----- Extract the genes found in each analysis -----
TFTgene <- intersect(FC_TFTEC, FC_TFTSC)
TFTgene <- intersect(TFTgene, FC_TFTEE)
TFTgene <- intersect(TFTgene, FC_TFTTA)
TFTgene <- intersect(TFTgene, FC_TFTPNT)
TFTgene <- intersect(TFTgene, FC_TFTGB)


#----- Extract in the original dataframe with expression data the precedent extracted genes -----
CellTFT <- DATASbst[paste(TFTgene),]

CompTFTmean <- All_mean[,-7]
CompTFTmean <- data.frame(apply(CompTFTmean, 1, mean))
CompTFTmean <- cbind(TFT_mean, CompTFTmean)
CompTFTmean <- transform(CompTFTmean, FC=CompTFTmean[,1]/CompTFTmean[,2])
CompTFTmean <- CompTFTmean[TFTgene,]
CompTFTmean <- CompTFTmean[order(CompTFTmean$FC, decreasing = TRUE),]

CellTFT <- CellTFT[rownames(head(CompTFTmean, 10)),]
GenesSCadd <- rownames(CellTFT)
CellTFT <- log2(CellTFT)
CellTFT <- cbind(rownames(CellTFT), CellTFT)
colnames(CellTFT)<- c("Gene", 
                      paste("Enterocytes", seq(1:ncol(EC_Sbst))),
                      paste("Endocrine Cells", seq(1:ncol(EE_Sbst))),
                      paste("Paneth Cells", seq(1:ncol(PNT_Sbst))),
                      paste("TA", seq(1:ncol(TA_Sbst))),
                      paste("SC", seq(1:ncol(SC_Sbst))),
                      paste("GB", seq(1:ncol(GB_Sbst))),
                      paste("TFT", seq(1:ncol(TFT_Sbst))))
rownames(CellTFT) <- NULL

CellTFT <- melt(CellTFT, id.vars = "Gene")
CellTFT$variable<- c(rep("EC", ncol(EC_Sbst)*10),
                     rep("EE", ncol(EE_Sbst)*10),
                     rep("PNT", ncol(PNT_Sbst)*10),
                     rep("TA", ncol(TA_Sbst)*10),
                     rep("SC", ncol(SC_Sbst)*10),
                     rep("GB", ncol(GB_Sbst)*10),
                     rep("TFT",ncol(TFT_Sbst)*10))


#----- Extract the mean value of the expression of each extracted genes in each cell type -----
AB <- data.frame(NULL)
AC <- data.frame(NULL)
AD <- data.frame(NULL)
AE <- data.frame(NULL)
AF <- data.frame(NULL)
AG <- data.frame(NULL)
AH <- data.frame(NULL)

for (i in GenesSCadd){
  AA <- CellTFT[which(CellTFT$Gene==i),]
  AB <- rbind(AB, mean(AA[which(AA$variable=="EC"),3]))
  AC <- rbind(AC, mean(AA[which(AA$variable=="EE"),3]))
  AD <- rbind(AD, mean(AA[which(AA$variable=="PNT"),3]))
  AE <- rbind(AE, mean(AA[which(AA$variable=="TA"),3]))
  AF <- rbind(AF, mean(AA[which(AA$variable=="SC"),3]))
  AG <- rbind(AG, mean(AA[which(AA$variable=="GB"),3]))
  AH <- rbind(AH, mean(AA[which(AA$variable=="TFT"),3]))
}
TFTgenemean <- cbind.data.frame(GenesSCadd,AB, AC, AD, AE, AF, AG, AH)
colnames(TFTgenemean) <- c("Gene","EC","EE","PNT","TA","SC","GB","TFT")
write.csv(TFTgenemean, file = "TFTmeans.csv")


AB <- data.frame(NULL)
AC <- data.frame(NULL)
AD <- data.frame(NULL)
AE <- data.frame(NULL)
AF <- data.frame(NULL)
AG <- data.frame(NULL)
AH <- data.frame(NULL)


for (i in GenesSCadd){
  AA <- CellTFT[which(CellTFT$Gene==i),]
  AB <- rbind(AB, median(AA[which(AA$variable=="EC"),3]))
  AC <- rbind(AC, median(AA[which(AA$variable=="EE"),3]))
  AD <- rbind(AD, median(AA[which(AA$variable=="PNT"),3]))
  AE <- rbind(AE, median(AA[which(AA$variable=="TA"),3]))
  AF <- rbind(AF, median(AA[which(AA$variable=="SC"),3]))
  AG <- rbind(AG, median(AA[which(AA$variable=="GB"),3]))
  AH <- rbind(AH, median(AA[which(AA$variable=="TFT"),3]))
}
TFTgenemedian <- cbind.data.frame(GenesSCadd,AB, AC, AD, AE, AF, AG, AH)
colnames(TFTgenemedian) <- c("Gene","EC","EE","PNT","TA","SC","GB","TFT")
write.csv(TFTgenemedian, file = "TFTmedian.csv")


#----- Create plots of the cell type specific genes -----
CellTFT$variable<- c(rep("Enterocytes", ncol(EC_Sbst)*10),
                     rep("Endocrine Cells", ncol(EE_Sbst)*10),
                     rep("Paneth Cells", ncol(PNT_Sbst)*10),
                     rep("TA Cells", ncol(TA_Sbst)*10),
                     rep("Stem Cells", ncol(SC_Sbst)*10),
                     rep("Goblet Cells", ncol(GB_Sbst)*10),
                     rep("Tuft Cells",ncol(TFT_Sbst)*10))

CellTFT$Colour <-  ifelse(CellTFT$variable == "Tuft Cells", paste("Color2"), paste("Color1"))


png("TFT10mean.png", width = 6000, height = 9000, units = "px", res = 500)
TFT10mean <- ggplot(CellTFT)+
  facet_wrap(.~Gene, ncol = 2)+
  geom_jitter(aes(variable, value),position = position_dodge(0.5), shape=NA )+
  stat_summary(fun.data = min.mean.sd.max, geom = "boxplot", aes(x=variable, y=value, fill=Colour))+
  ggtitle("Mean")+
  ylab("log2(TPM+1)")+
  scale_fill_manual(values=c("white","gold2"))+
  theme(axis.title = element_text(size = 22),
        axis.text = element_text(size = 20),
        strip.text = element_text(size = 22, family = "bold"),
        title = element_text(size = 25, family = "bold"),
        axis.title.x = element_blank(),
        axis.title.y = element_text(vjust = 2),
        axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
        legend.position = "none",
        plot.title = element_text(hjust = 0.5),
        plot.margin = unit(c(1,1,1,1), "cm"),
        panel.spacing = unit(1,"lines"))
print(TFT10mean)
dev.off()

png("TFT10med.png", width = 6000, height = 9000, units = "px", res = 500)
TFT10med <- ggplot(CellTFT)+
  facet_wrap(.~Gene, ncol = 2)+
  geom_jitter(aes(variable, value),position = position_dodge(0.5), shape=1 )+
  stat_summary(fun.data = min.med.qt.max, geom = "boxplot", aes(x=variable, y=value, fill=Colour))+
  ggtitle("Median")+
  ylab("log2(TPM+1)")+
  scale_fill_manual(values=c("white","gold2"))+
  theme(axis.title = element_text(size = 22),
        axis.text = element_text(size = 20),
        strip.text = element_text(size = 22, family = "bold"),
        title = element_text(size = 25, family = "bold"),
        axis.title.x = element_blank(),
        axis.title.y = element_text(vjust = 2),
        axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
        legend.position = "none",
        plot.title = element_text(hjust = 0.5),
        plot.margin = unit(c(1,1,1,1), "cm"),
        panel.spacing = unit(1,"lines"))
print(TFT10med)
dev.off()

png("TFT.png", width = 9000, height = 9000, units = "px", res = 500)
ggarrange(TFT10mean, TFT10med, ncol = 2)
dev.off()


#---------------------------------------
#Transient Amplifying Cells cell type specific Genes
#--------------------------------------


#----- Merging dataframe of mean expression of TA with all the other cell types -----
FC_TAEC <- cbind.data.frame(TA_mean, EC_mean)
FC_TAEE <- cbind.data.frame(TA_mean, EE_mean)
FC_TATFT<- cbind.data.frame(TA_mean, TFT_mean)
FC_TAPNT <- cbind.data.frame(TA_mean, PNT_mean)
FC_TASC <- cbind.data.frame(TA_mean, SC_mean)
FC_TAGB <- cbind.data.frame(TA_mean, GB_mean)


#----- Calculate the fold change between Goblet cells and all the other cell types -----
FC_TAEC <- transform(FC_TAEC, FoldChange=FC_TAEC[,1]/FC_TAEC[,2])
FC_TAEE <- transform(FC_TAEE, FoldChange=FC_TAEE[,1]/FC_TAEE[,2])
FC_TATFT <- transform(FC_TATFT, FoldChange=FC_TATFT[,1]/FC_TATFT[,2])
FC_TAPNT <- transform(FC_TAPNT, FoldChange=FC_TAPNT[,1]/FC_TAPNT[,2])
FC_TASC <- transform(FC_TASC, FoldChange=FC_TASC[,1]/FC_TASC[,2])
FC_TAGB <- transform(FC_TAGB, FoldChange=FC_TAGB[,1]/FC_TAGB[,2])


#----- Log transform the data to have a better distribution of the results -----
FC_TAEC$FoldChange <- log2(FC_TAEC$FoldChange)
FC_TAEE$FoldChange <- log2(FC_TAEE$FoldChange)
FC_TATFT$FoldChange <- log2(FC_TATFT$FoldChange)
FC_TAPNT$FoldChange <- log2(FC_TAPNT$FoldChange)
FC_TASC$FoldChange <- log2(FC_TASC$FoldChange)
FC_TAGB$FoldChange <- log2(FC_TAGB$FoldChange)


#----- Extract the 300 genes with the highest fold change in each fold change analysis for the TA cells -----
FC_TAEC <- rownames(head(FC_TAEC[order(FC_TAEC$FoldChange, decreasing = TRUE),],300))
FC_TAEE <- rownames(head(FC_TAEE[order(FC_TAEE$FoldChange, decreasing = TRUE),],300))
FC_TATFT <- rownames(head(FC_TATFT[order(FC_TATFT$FoldChange, decreasing = TRUE),],300))
FC_TAPNT <- rownames(head(FC_TAPNT[order(FC_TAPNT$FoldChange, decreasing = TRUE),],300))
FC_TASC <- rownames(head(FC_TASC[order(FC_TASC$FoldChange, decreasing = TRUE),],300))
FC_TAGB <- rownames(head(FC_TAGB[order(FC_TAGB$FoldChange, decreasing = TRUE),],300))


#----- Extract the genes found in each analysis -----
# We forgot the stem cells, thus, genes expressed in TA cells and Stem cells are kept. We do this because there isn't any gene specific to TA
TAgene <- intersect(FC_TAEE, FC_TAEC)
TAgene <- intersect(TAgene, FC_TAGB)
TAgene <- intersect(TAgene, FC_TATFT)
TAgene <- intersect(TAgene, FC_TAPNT)
#To find genes expressed in TA and another cell type, delete the line with the cell type.


#----- Extract in the original dataframe with expression data the precedent extracted genes -----
CellTA <- DATASbst[paste(TAgene),]

CompTAmean <- All_mean[,-4]
CompTAmean <- data.frame(apply(CompTAmean, 1, mean))
CompTAmean <- cbind(TA_mean, CompTAmean)
CompTAmean <- transform(CompTAmean, FC=CompTAmean[,1]/CompTAmean[,2])
CompTAmean <- CompTAmean[TAgene,]
CompTAmean <- CompTAmean[order(CompTAmean$FC, decreasing = TRUE),]

CellTA <- CellTA[rownames(head(CompTAmean, 10)),]
CellTA <- rbind(CellTA, DATASbst[c("Car1", "Gjb3", "Dmbt1", "Rbp7", "Arg2"),])
GenesSCadd <- rownames(CellTA)
CellTA <- log2(CellTA)
CellTA <- cbind(rownames(CellTA), CellTA)
colnames(CellTA)<- c("Gene", 
                       paste("Enterocytes", seq(1:ncol(EC_Sbst))),
                       paste("Endocrine Cells", seq(1:ncol(EE_Sbst))),
                       paste("Paneth Cells", seq(1:ncol(PNT_Sbst))),
                       paste("TA", seq(1:ncol(TA_Sbst))),
                       paste("SC", seq(1:ncol(SC_Sbst))),
                       paste("GB", seq(1:ncol(GB_Sbst))),
                       paste("TFT", seq(1:ncol(TFT_Sbst))))
rownames(CellTA) <- NULL

CellTA <- melt(CellTA, id.vars = "Gene")
CellTA$variable<- c(rep("EC", ncol(EC_Sbst)*6),
                      rep("EE", ncol(EE_Sbst)*6),
                      rep("PNT", ncol(PNT_Sbst)*6),
                      rep("TA", ncol(TA_Sbst)*6),
                      rep("SC", ncol(SC_Sbst)*6),
                      rep("GB", ncol(GB_Sbst)*6),
                      rep("TFT",ncol(TFT_Sbst)*6))


#----- Extract the mean value of the expression of each extracted genes in each cell type -----
AB <- data.frame(NULL)
AC <- data.frame(NULL)
AD <- data.frame(NULL)
AE <- data.frame(NULL)
AF <- data.frame(NULL)
AG <- data.frame(NULL)
AH <- data.frame(NULL)

for (i in GenesSCadd){
  AA <- CellTA[which(CellTA$Gene==i),]
  AB <- rbind(AB, mean(AA[which(AA$variable=="EC"),3]))
  AC <- rbind(AC, mean(AA[which(AA$variable=="EE"),3]))
  AD <- rbind(AD, mean(AA[which(AA$variable=="PNT"),3]))
  AE <- rbind(AE, mean(AA[which(AA$variable=="TA"),3]))
  AF <- rbind(AF, mean(AA[which(AA$variable=="SC"),3]))
  AG <- rbind(AG, mean(AA[which(AA$variable=="GB"),3]))
  AH <- rbind(AH, mean(AA[which(AA$variable=="TFT"),3]))
}
TAgenemean <- cbind.data.frame(GenesSCadd,AB, AC, AD, AE, AF, AG, AH)
colnames(TAgenemean) <- c("Gene","EC","EE","PNT","TA","SC","GB","TFT")
write.csv(TAgenemean, file = "TAmeans.csv")


AB <- data.frame(NULL)
AC <- data.frame(NULL)
AD <- data.frame(NULL)
AE <- data.frame(NULL)
AF <- data.frame(NULL)
AG <- data.frame(NULL)
AH <- data.frame(NULL)


for (i in GenesSCadd){
  AA <- CellTA[which(CellTA$Gene==i),]
  AB <- rbind(AB, median(AA[which(AA$variable=="EC"),3]))
  AC <- rbind(AC, median(AA[which(AA$variable=="EE"),3]))
  AD <- rbind(AD, median(AA[which(AA$variable=="PNT"),3]))
  AE <- rbind(AE, median(AA[which(AA$variable=="TA"),3]))
  AF <- rbind(AF, median(AA[which(AA$variable=="SC"),3]))
  AG <- rbind(AG, median(AA[which(AA$variable=="GB"),3]))
  AH <- rbind(AH, median(AA[which(AA$variable=="TFT"),3]))
}
TAgenemedian <- cbind.data.frame(GenesSCadd,AB, AC, AD, AE, AF, AG, AH)
colnames(TAgenemedian) <- c("Gene","EC","EE","PNT","TA","SC","GB","TFT")
write.csv(TAgenemedian, file = "TAmedian.csv")


#----- Create plots of the cell type specific genes -----
CellTA$variable<- c(rep("Enterocytes", ncol(EC_Sbst)*6),
                      rep("Endocrine Cells", ncol(EE_Sbst)*6),
                      rep("Paneth Cells", ncol(PNT_Sbst)*6),
                      rep("TA Cells", ncol(TA_Sbst)*6),
                      rep("Stem Cells", ncol(SC_Sbst)*6),
                      rep("Goblet Cells", ncol(GB_Sbst)*6),
                      rep("Tuft Cells",ncol(TFT_Sbst)*6))

CellTA$Colour <-  ifelse(CellTA$variable == "TA Cells", paste("Color2"), paste("Color1"))


png("TA10mean.png", width = 6000, height = 9000, units = "px", res = 500)
TA10mean <- ggplot(CellTA)+
  facet_wrap(.~Gene, ncol = 2)+
  geom_jitter(aes(variable, value),position = position_dodge(0.5), shape=NA )+
  stat_summary(fun.data = min.mean.sd.max, geom = "boxplot", aes(x=variable, y=value, fill=Colour))+
  ggtitle("Mean")+
  ylab("log2(TPM+1)")+
  scale_fill_manual(values=c("white","gold2"))+
  theme(axis.title = element_text(size = 22),
        axis.text = element_text(size = 20),
        strip.text = element_text(size = 22, family = "bold"),
        title = element_text(size = 25, family = "bold"),
        axis.title.x = element_blank(),
        axis.title.y = element_text(vjust = 2),
        axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
        legend.position = "none",
        plot.title = element_text(hjust = 0.5),
        plot.margin = unit(c(1,1,1,1), "cm"),
        panel.spacing = unit(1,"lines"))
print(TA10mean)
dev.off()

png("TA10med.png", width = 6000, height = 9000, units = "px", res = 500)
TA10med <- ggplot(CellTA)+
  facet_wrap(.~Gene, ncol = 2)+
  geom_jitter(aes(variable, value),position = position_dodge(0.5), shape=1 )+
  stat_summary(fun.data = min.med.qt.max, geom = "boxplot", aes(x=variable, y=value, fill=Colour))+
  ggtitle("Median")+
  ylab("log2(TPM+1)")+
  scale_fill_manual(values=c("white","gold2"))+
  theme(axis.title = element_text(size = 22),
        axis.text = element_text(size = 20),
        strip.text = element_text(size = 22, family = "bold"),
        title = element_text(size = 25, family = "bold"),
        axis.title.x = element_blank(),
        axis.title.y = element_text(vjust = 2),
        axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
        legend.position = "none",
        plot.title = element_text(hjust = 0.5),
        plot.margin = unit(c(1,1,1,1), "cm"),
        panel.spacing = unit(1,"lines"))
print(TA10med)
dev.off()

png("TA.png", width = 9000, height = 9000, units = "px", res = 500)
ggarrange(TA10mean, TA10med, ncol = 2)
dev.off()

